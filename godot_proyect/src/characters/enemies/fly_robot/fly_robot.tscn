[gd_scene load_steps=16 format=2]

[ext_resource path="res://src/characters/enemies/enemy.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/sprites/characters/enemies/fly_robot/fly_robot_body_mask_2.png" type="Texture" id=2]
[ext_resource path="res://resources/characters/enemies/fly_robot_masks.tres" type="SpriteFrames" id=3]
[ext_resource path="res://assets/sprites/characters/enemies/fly_robot/fly_robot_propeller_mask_3.png" type="Texture" id=4]
[ext_resource path="res://src/library/animated_palette_sprite.gd" type="Script" id=11]
[ext_resource path="res://resources/characters/enemies/enemy_palettes.tres" type="SpriteFrames" id=12]
[ext_resource path="res://assets/sprites/characters/enemies/palettes/enemy_palette_0.png" type="Texture" id=13]
[ext_resource path="res://src/characters/enemies/fly_robot/fly_robot_stats.tres" type="Resource" id=14]
[ext_resource path="res://src/characters/enemies/fly_robot/states/accelerate.gd" type="Script" id=15]
[ext_resource path="res://src/characters/enemies/fly_robot/states/deaccelerate.gd" type="Script" id=16]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

//The palette used
uniform sampler2D palette;
//how many horizontal pixels has the palette
uniform float palette_size;
//Mask for wich color use from palette
uniform sampler2D mask;

void fragment() {
	vec4 mask_color = texture(mask,UV);
	vec4 output = texture(TEXTURE,UV);
	if(mask_color.r != 1.0)
	{
		highp float color_r = mask_color.r;
		//If an inconsistency appears between Intel and Amd/Nvidia, feel free to fix it and commit, but take this as a warning for production use
		output = texture(palette,vec2((color_r*255.0+0.5)/255.0,0.0));
	}
	else{
		output.a = 0.0; // White turns into transparent.
	}
	COLOR.rgba = output;
}
"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
resource_name = "PaletteMaterial"
shader = SubResource( 1 )
shader_param/palette_size = 8.0
shader_param/palette = ExtResource( 13 )
shader_param/mask = ExtResource( 2 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

//The palette used
uniform sampler2D palette;
//how many horizontal pixels has the palette
uniform float palette_size;
//Mask for wich color use from palette
uniform sampler2D mask;

void fragment() {
	vec4 mask_color = texture(mask,UV);
	vec4 output = texture(TEXTURE,UV);
	if(mask_color.r != 1.0)
	{
		highp float color_r = mask_color.r;
		//If an inconsistency appears between Intel and Amd/Nvidia, feel free to fix it and commit, but take this as a warning for production use
		output = texture(palette,vec2((color_r*255.0+0.5)/255.0,0.0));
	}
	else{
		output.a = 0.0; // White turns into transparent.
	}
	COLOR.rgba = output;
}
"

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
resource_name = "PaletteMaterial"
shader = SubResource( 3 )
shader_param/palette_size = 8.0
shader_param/palette = ExtResource( 13 )
shader_param/mask = ExtResource( 4 )

[sub_resource type="RectangleShape2D" id=5]
extents = Vector2( 10.5, 18 )

[node name="FlyRobot" instance=ExtResource( 1 )]
stats = ExtResource( 14 )

[node name="SprBody" type="AnimatedSprite" parent="." index="0"]
material = SubResource( 2 )
frames = ExtResource( 3 )
animation = "body_charging"
frame = 1
playing = true
script = ExtResource( 11 )
palettes = ExtResource( 12 )

[node name="SprPropeller" type="AnimatedSprite" parent="." index="1"]
material = SubResource( 4 )
frames = ExtResource( 3 )
animation = "propeller"
frame = 3
playing = true
script = ExtResource( 11 )
palettes = ExtResource( 12 )

[node name="CollisionBox" parent="." index="2"]
position = Vector2( -0.5, 1 )
shape = SubResource( 5 )

[node name="StateMachine" parent="." index="3"]
initial_state = NodePath("Move/Follow/Megaship/Accelerate")

[node name="Move" parent="StateMachine" index="0"]
rotate_forwards = true

[node name="Accelerate" type="Node" parent="StateMachine/Move/Follow/Megaship" index="0"]
script = ExtResource( 15 )

[node name="Deaccelerate" parent="StateMachine/Move" index="1"]
script = ExtResource( 16 )

[node name="HPBar" parent="hud" index="0"]
margin_left = 14.0
margin_top = -10.0
margin_right = 19.0
margin_bottom = 10.0
max_value = 10.0
value = 10.0
